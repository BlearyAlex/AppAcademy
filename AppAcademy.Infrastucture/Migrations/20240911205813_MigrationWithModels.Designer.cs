// <auto-generated />
using System;
using AppAcademy.Infrastucture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppAcademy.Infrastucture.Migrations
{
    [DbContext(typeof(AppAcademyDbContext))]
    [Migration("20240911205813_MigrationWithModels")]
    partial class MigrationWithModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppAcademy.Domain.Auth.EstadoUser", b =>
                {
                    b.Property<string>("EstadoUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserEstado")
                        .HasColumnType("int");

                    b.HasKey("EstadoUserId");

                    b.ToTable("EstadoUsers");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.HistorialAcceso", b =>
                {
                    b.Property<string>("HistorialAccesoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DireccionIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dispositivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAcceso")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipoAcceso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HistorialAccesoId");

                    b.HasIndex("UserId");

                    b.ToTable("HistorialAccesos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.Permiso", b =>
                {
                    b.Property<string>("PermisoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePermiso")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermisoId");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.Rol", b =>
                {
                    b.Property<string>("RolId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaUltimoAcceso")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("EstadoUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppAcademy.Domain.Categoria", b =>
                {
                    b.Property<string>("CategoriaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("AppAcademy.Domain.Cliente", b =>
                {
                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AppAcademy.Domain.Corte", b =>
                {
                    b.Property<string>("CorteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCorte")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalDevoluciones")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEfectivo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTarjeta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalVales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CorteId");

                    b.HasIndex("UserId");

                    b.ToTable("Cortes");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetalleCorte", b =>
                {
                    b.Property<string>("DetalleCorteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CorteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ventaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DetalleCorteId");

                    b.HasIndex("CorteId");

                    b.HasIndex("ventaId");

                    b.ToTable("DetalleCortes");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetallePago", b =>
                {
                    b.Property<string>("DetallePagoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("ventaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DetallePagoId");

                    b.HasIndex("ventaId");

                    b.ToTable("DetallePagos");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetalleVenta", b =>
                {
                    b.Property<string>("DetalleVentaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DescuentoProducto")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("ventaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DetalleVentaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ventaId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("AppAcademy.Domain.Devolucion", b =>
                {
                    b.Property<string>("DevolucionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ventaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DevolucionId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UserId");

                    b.HasIndex("ventaId");

                    b.ToTable("Devoluciones");
                });

            modelBuilder.Entity("AppAcademy.Domain.Entrada", b =>
                {
                    b.Property<string>("EntradaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Bruto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaDeEntrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("Folio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrigenUbicacionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalProductosEntrada")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VencimientoPago")
                        .HasColumnType("int");

                    b.HasKey("EntradaId");

                    b.HasIndex("OrigenUbicacionId");

                    b.HasIndex("UserId");

                    b.ToTable("Entradas");
                });

            modelBuilder.Entity("AppAcademy.Domain.EntradaProducto", b =>
                {
                    b.Property<string>("EntradaProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EntradaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntradaProductoId");

                    b.HasIndex("EntradaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("EntradaProductos");
                });

            modelBuilder.Entity("AppAcademy.Domain.HistorialInventario", b =>
                {
                    b.Property<string>("HistorialInventarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CantidadAnterior")
                        .HasColumnType("int");

                    b.Property<int>("CantidadNueva")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HistorialInventarioId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UserId");

                    b.ToTable("HistorialInventarios");
                });

            modelBuilder.Entity("AppAcademy.Domain.HistorialPrecio", b =>
                {
                    b.Property<string>("HistorialPrecioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioAnterior")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HistorialPrecioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("HistorialPrecios");
                });

            modelBuilder.Entity("AppAcademy.Domain.Inventario", b =>
                {
                    b.Property<string>("InventarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaUltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InventarioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("AppAcademy.Domain.Marca", b =>
                {
                    b.Property<string>("MarcaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarcaId");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("AppAcademy.Domain.Producto", b =>
                {
                    b.Property<string>("ProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoBarras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DescuentoBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EstadoProducto")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Impuesto")
                        .HasColumnType("int");

                    b.Property<string>("MarcaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProveedorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StockMaximo")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Promocion", b =>
                {
                    b.Property<string>("PromocionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Descuento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromocionId");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("AppAcademy.Domain.Proveedor", b =>
                {
                    b.Property<string>("ProveedorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("AppAcademy.Domain.Salida", b =>
                {
                    b.Property<string>("SalidaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalProductosSalida")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SalidaId");

                    b.HasIndex("UserId");

                    b.ToTable("Salidas");
                });

            modelBuilder.Entity("AppAcademy.Domain.Ubicacion", b =>
                {
                    b.Property<string>("UbicacionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UbicacionId");

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("AppAcademy.Domain.Venta", b =>
                {
                    b.Property<string>("ventaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ventaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UserId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.Property<string>("PermisosPermisoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesRolId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermisosPermisoId", "RolesRolId");

                    b.HasIndex("RolesRolId");

                    b.ToTable("PermisoRol");
                });

            modelBuilder.Entity("ProductoPromocion", b =>
                {
                    b.Property<string>("ProductosProductoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PromocionesPromocionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductosProductoId", "PromocionesPromocionId");

                    b.HasIndex("PromocionesPromocionId");

                    b.ToTable("ProductoPromocion");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.HistorialAcceso", b =>
                {
                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("HistorialAccesos")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.User", b =>
                {
                    b.HasOne("AppAcademy.Domain.Auth.EstadoUser", "EstadoUser")
                        .WithMany("Users")
                        .HasForeignKey("EstadoUserId");

                    b.Navigation("EstadoUser");
                });

            modelBuilder.Entity("AppAcademy.Domain.Corte", b =>
                {
                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetalleCorte", b =>
                {
                    b.HasOne("AppAcademy.Domain.Corte", "Corte")
                        .WithMany("DetalleCortes")
                        .HasForeignKey("CorteId");

                    b.HasOne("AppAcademy.Domain.Venta", "Venta")
                        .WithMany("DetalleCortes")
                        .HasForeignKey("ventaId");

                    b.Navigation("Corte");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetallePago", b =>
                {
                    b.HasOne("AppAcademy.Domain.Venta", "Venta")
                        .WithMany("DetallePagos")
                        .HasForeignKey("ventaId");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("AppAcademy.Domain.DetalleVenta", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("ProductoId");

                    b.HasOne("AppAcademy.Domain.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("ventaId");

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("AppAcademy.Domain.Devolucion", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("Devoluciones")
                        .HasForeignKey("ProductoId");

                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("Devoluciones")
                        .HasForeignKey("UserId");

                    b.HasOne("AppAcademy.Domain.Venta", "Venta")
                        .WithMany("Devoluciones")
                        .HasForeignKey("ventaId");

                    b.Navigation("Producto");

                    b.Navigation("User");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("AppAcademy.Domain.Entrada", b =>
                {
                    b.HasOne("AppAcademy.Domain.Ubicacion", "Origen")
                        .WithMany("Entradas")
                        .HasForeignKey("OrigenUbicacionId");

                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("Entradas")
                        .HasForeignKey("UserId");

                    b.Navigation("Origen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppAcademy.Domain.EntradaProducto", b =>
                {
                    b.HasOne("AppAcademy.Domain.Entrada", "Entrada")
                        .WithMany()
                        .HasForeignKey("EntradaId");

                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("EntradaProductos")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Entrada");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("AppAcademy.Domain.HistorialInventario", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("HistorialInventarios")
                        .HasForeignKey("ProductoId");

                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("HistorialInventarios")
                        .HasForeignKey("UserId");

                    b.Navigation("Producto");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppAcademy.Domain.HistorialPrecio", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("HistorialPrecios")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("AppAcademy.Domain.Inventario", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", "Producto")
                        .WithMany("Inventarios")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("AppAcademy.Domain.Producto", b =>
                {
                    b.HasOne("AppAcademy.Domain.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("AppAcademy.Domain.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId");

                    b.HasOne("AppAcademy.Domain.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("ProveedorId");

                    b.Navigation("Categoria");

                    b.Navigation("Marca");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("AppAcademy.Domain.Salida", b =>
                {
                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("Salidas")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppAcademy.Domain.Venta", b =>
                {
                    b.HasOne("AppAcademy.Domain.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId");

                    b.HasOne("AppAcademy.Domain.Auth.User", "User")
                        .WithMany("Ventas")
                        .HasForeignKey("UserId");

                    b.Navigation("Cliente");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.HasOne("AppAcademy.Domain.Auth.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisosPermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppAcademy.Domain.Auth.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolesRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductoPromocion", b =>
                {
                    b.HasOne("AppAcademy.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppAcademy.Domain.Promocion", null)
                        .WithMany()
                        .HasForeignKey("PromocionesPromocionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.EstadoUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppAcademy.Domain.Auth.User", b =>
                {
                    b.Navigation("Devoluciones");

                    b.Navigation("Entradas");

                    b.Navigation("HistorialAccesos");

                    b.Navigation("HistorialInventarios");

                    b.Navigation("Salidas");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("AppAcademy.Domain.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Cliente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("AppAcademy.Domain.Corte", b =>
                {
                    b.Navigation("DetalleCortes");
                });

            modelBuilder.Entity("AppAcademy.Domain.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Producto", b =>
                {
                    b.Navigation("DetalleVentas");

                    b.Navigation("Devoluciones");

                    b.Navigation("EntradaProductos");

                    b.Navigation("HistorialInventarios");

                    b.Navigation("HistorialPrecios");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("AppAcademy.Domain.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("AppAcademy.Domain.Ubicacion", b =>
                {
                    b.Navigation("Entradas");
                });

            modelBuilder.Entity("AppAcademy.Domain.Venta", b =>
                {
                    b.Navigation("DetalleCortes");

                    b.Navigation("DetallePagos");

                    b.Navigation("DetalleVentas");

                    b.Navigation("Devoluciones");
                });
#pragma warning restore 612, 618
        }
    }
}
